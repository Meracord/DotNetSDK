using System;
using Meracord.Sandbox.Factories;
using Meracord.API.Common.Enumeration;
using Meracord.API.Common.Transport;

namespace Meracord.Sandbox.Example
{
    /// <summary>
    /// Sample method calls using the API DataSession.Creditor object
    /// </summary>
    internal class CreditorMethods
    {
        /// <summary>
        /// Execute sample method calls
        /// </summary>
        public static void Perform()
        {
            try
            {
                const string partialCreditorId = "Test";

                var session = SessionFactory.Create();

                // Call Creditor.FindById(), multiple matches
                Helper.ShowResults("Creditor.FindById('" + partialCreditorId + "')", session.Creditor.FindById(partialCreditorId));

                // Call Creditor.Create()
                CreditorCreate(session);

            }
            catch (Exception ex)
            {
                Helper.DisplayException(ex);
            }
        }

        /// <summary>
        /// Execute Creditor.Create() method
        /// </summary>
        private static void CreditorCreate(Meracord.API.DataSession session)
        {
            var creditor = new Creditor
            {
                Id = "", // The Id will be auto generated by Meracord based on the First word in the CreditorName
                CreditorName = "My Creditor Name",
                Address1 = "1001 Pacific Ave",
                Address2 = "Suite 300", // Address standardization will move suplimental values to Address1
                City = "Tacoma",
                State = "WA",
                PostalCode = "", // Address standardization will correct or find Postal when a complete address is supplied

                // Optional Creditor Bank Account Information
                BankProfile = new BankProfile 
                {
                    RoutingNumber = Helpers.BankRoutingNumber.BankOfAmerica,
                    AccountNumber = "9024385629856",
                    AccountType = (int) BankAccountType.Checking
                }
            };

            var result = session.Creditor.Create(creditor);

            if (result.Success)
            {
                Helper.ShowResults("Creditor.Create()", result);
                return;
            }

            Console.WriteLine("Creditor {0}, already exists", creditor.CreditorName);
        }
    }
}